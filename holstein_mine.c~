/*
ID:svasude2 
LANG: C
TASK:holstein 
*/
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX_VITAMINS 25
#define MAX_FEEDS 15
#define INT_MAX 214748347 
int Vitamins[MAX_VITAMINS]={0};
int Feeds[MAX_FEEDS][MAX_VITAMINS];
int Num_Vitamins,types_of_feeds ;
int Visited_feeds[MAX_FEEDS]={0};
int Current_feeds[MAX_FEEDS]={-1};
int Result_feeds[MAX_FEEDS]={0};

int largest=INT_MAX;
int count=0;
int queue_pointer=0;;
int length_queue=0;;
struct State
{
  short level;
  bool Visited_feeds[MAX_FEEDS];
  short feed;
  short Vitamins[MAX_FEEDS];
}state;
//struct State state;
int pp=0;
int head=0;
int stop=0;
struct State queue[100000];

struct State pop(void)
{
  struct State bro =queue[0];
  for (int i=1;i<length_queue;i++)
    queue[i-1]=queue[i];
  return bro;
}
void process(struct State* state)
{
  //check if states vitamins checks out;
  int flag=1;
  int ll=0;
  //  if (Num_Vitamins==1) return;
  for (int p=0;p<Num_Vitamins;p++)
    {
      
      if (state->Vitamins[p]>0) flag=0;
    }
  if (flag==1)
    {
      if (state->level<largest)
	{
	  largest=state->level;
	  //copy result feeds
	  //printf("largest %d level %d  ",largest,state->level);
	  for (int i=0;i<types_of_feeds;i++)
	    {
	      
	      if (state->Visited_feeds[i]) {
		//	printf(" %d  ",i);
		Result_feeds[ll++]=i+1;
		
	      }
	    }
	  //printf("\n");
	  //printf("%d\n ",Num_Vitamins);
	  for (int p=0;p<Num_Vitamins;p++)
	    {
	      // printf("%d ",state->Vitamins[p]);
	    }
	  //printf("\n");
	}
      stop=1;
    }
  else if (stop==0)
    {
      struct State Next_State;
       
      //enqueue next states
      
      for (int i=0;i<types_of_feeds;i++)
	{
	 
	  if (!state->Visited_feeds[i])
	    {
	      
	      //if (pp==1510) printf("%d \n",Num_Vitamins);
	      Next_State.level=state->level+1;
	      Next_State.feed=i;
	      //copy Visited feeds from the previous states
	      for (int j=0;j<types_of_feeds;j++) Next_State.Visited_feeds[j]=state->Visited_feeds[j];
	      Next_State.Visited_feeds[i]=1;
	      //decrease the vitamins according to feed
	      
	      
	      for (int k=0;k<Num_Vitamins;k++)   Next_State.Vitamins[k]=state->Vitamins[k]-Feeds[i][k];
	      
	      queue[queue_pointer++]=Next_State;
	      //    if (pp==1510) printf("%d %d\n",Num_Vitamins,queue_pointer);
	      length_queue++;
	      
	    }
	  else {
	    // printf("%d booo \n",i);
	  }
	  
	}
    }
  //xif (pp==1510) printf("%d \n",Num_Vitamins);
}
void bfs(void)
{
  //initial states
  //struct State state;
 
  for (int i=0;i<types_of_feeds;i++)
    {
      
      state.feed=i;
      for (int k=0;k<types_of_feeds;k++){
	state.Visited_feeds[k]=0;
      }
      for (int j=0;j<Num_Vitamins;j++)
	{
	  state.Vitamins[j]=Vitamins[j]-Feeds[i][j];
	}
      state.level=1;
      state.Visited_feeds[i]=1;
      queue[i]=state;
      
      length_queue++;
      queue_pointer++;
    }
  
  while(length_queue!=0)
    {
      //take the first state 
      
      //      printf("%d %d\n ",Num_Vitamins,pp);
   
      
      for (int i=head;i<queue_pointer;i++)
	{
	  //  printf("%d ",queue[i].feed);

	}
      //       printf("\n");
      state=pop();
      queue_pointer--;
      length_queue--;
      process(&state);
      pp++;
    }

}
void main (void)
{
  FILE *fin  = fopen ("holstein.in", "r");
  FILE *fout = fopen ("holstein.out", "w");
  
  fscanf (fin, "%d", &Num_Vitamins);/* the two input integers */
  for (int i=0;i<Num_Vitamins;i++) fscanf (fin, "%d", &Vitamins[i]);/* the two input integers */
  fscanf (fin, "%d", &types_of_feeds);
  for (int i=0;i<types_of_feeds;i++)
    {
      for (int j=0;j<Num_Vitamins;j++)
	{
	  fscanf (fin, "%d", &Feeds[i][j]);
	}
    }
  
  bfs();
  fprintf (fout, "%d",largest);
  for (int i=0;i<largest;i++)
   fprintf (fout, " %d",Result_feeds[i]);
  
  
  
  
  fprintf (fout, "\n");
  exit (0);
}
